dji_profit
bitcoin_profit
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, 0.1)
bitcoin_profit
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, 0.01)
bitcoin_profit
threshold_params = seq(0.005, 0.101, 0.002)
threshold_params
threshold_params = seq(0.005, 0.101, 0.002)
threshold_perf = data.frame(matrix(nrow = length(threshold_params) * 3, ncol = 3))
index = 1
colnames(threshold_perf) = c("currency", "threshold", "profit")
index = 1
for(i in length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
max(subset(threshold_perf, currency == "bitcoin")$profit)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
head(bitcoin_optim)
index = 1
for(i in 1:length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
max(subset(threshold_perf, currency == "bitcoin")$profit)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
head(bitcoin_optim)
max(bitcoin_optim$profit)
class(bitcoin_optim$profit)
threshold_perf$profit = as.numeric(threshold_perf$profit)
max(subset(threshold_perf, currency == "bitcoin")$profit)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit)
plot(bitcoin_optim$threshold, bitcoin_optim$profit)
plot(bitcoin_optim$threshold, bitcoin_optim$profit)
plot(bitcoin_optim$threshold, bitcoin_optim$profit)
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l")
head(bitcoin_optim)
dev.off()
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l")
dev.off()
plot(cars)
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l", xlab="Time", ylab="Currency Prices")
plot.new(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l", xlab="Time", ylab="Currency Prices")
plot.new()
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l", xlab="Time", ylab="Currency Prices")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
plot.new()
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "p",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
head(bitcoin_optim)
class(bitcoin_optim$threshold)
threshold_perf$threshold = as.numeric(threshold_perf$threshold)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot.new()
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "p",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
ethereum_optim = subset(threshold_perf, currency == "ethereum")
plot(ethereum_optim$threshold, ethereum_optim$profit, type = "l",
ylim = c(min(ethereum_optim$profit), max(ethereum_optim$profit)),  xlab="Time", ylab="Currency Prices")
dji_optim = subset(threshold_perf, currency == "dji")
plot(dji_optim$threshold, dji_optim$profit, type = "l",
ylim = c(min(dji_optim$profit), max(dji_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit = max(bitcoin_optim$profit)), threshold]
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), threshold]
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), 2]
bitcoin_thr
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), 2][1]
ethereum_thr = ethereum_optim[which(ethereum_optim$profit == max(ethereum_optim$profit)), 2][1]
dji_thr = dji_optim[which(dji_optim$profit == max(dji_optim$profit)), 2][1]
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, bitcoin_thr)
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
c(perf_dji, dji_profit) := returns_sim(dji_data, dji_thr)
write.csv(file = "ethereum_analysis.csv", perf_ethereum, row.names = F)
write.csv(file = "dji_analysis.csv", perf_dji, row.names = F)
head(df_perf)
btc = subset(df_perf, currency == "bitcoin")
mean(btc$mape)
ethereum_thr = 0.2
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
ethereum_profit
ethereum_thr = 0.3
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
ethereum_profit
returns_sim = function(data, threshold_risk_adj_return) {
data$risk_adj_return = 0
data$buy_sell = 0
data$profits = 0
for(i in 2:nrow(data)) {
data$risk_adj_return[i-1] = (data$forecast_actual[i] - data$actual_val[i-1])/sqrt(data$volatility[i])
data$buy_sell[i-1] = ifelse(data$risk_adj_return[i-1] > threshold_risk_adj_return, 1,
ifelse(data$risk_adj_return[i - 1] < - threshold_risk_adj_return, -1, 0))
data$profits[i] = (data$actual_val[i] - data$actual_val[i - 1])* data$buy_sell[i-1]
}
plot(data$train_start, data$actual_val, type="l", ylim=c(min(min(data$forecast_actual), min(data$actual_val)),
max(max(data$forecast_actual), max(data$actual_val))), xlab="Time", ylab="Currency Prices")
lines(data$train_start,data$forecast_actual,col="blue")
plot(data$train_start, data$profits, type="l", ylim=c(min(data$profits),
max(data$profits)), xlab="Time", ylab="Profits")
return(list(data, sum(data$profits)))
}
bitcoin_data = subset(df_perf, currency == "bitcoin")
ethereum_data = subset(df_perf, currency == "ethereum")
dji_data = subset(df_perf, currency == "dji")
head(bitcoin_data)
i = 100
i = 50
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
threshold_params[i]
threshold_params[30]
threshold_params[40]
threshold_params[45]
i = 45
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
bitcoin_profit
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
threshold_params = seq(0.1, 0.9, 0.02)
threshold_perf = data.frame(matrix(nrow = length(threshold_params) * 3, ncol = 3))
colnames(threshold_perf) = c("currency", "threshold", "profit")
index = 1
for(i in 1:length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
threshold_perf$profit = as.numeric(threshold_perf$profit)
threshold_perf$threshold = as.numeric(threshold_perf$threshold)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
threshold_params = seq(0.02, 0.9, 0.02)
threshold_perf = data.frame(matrix(nrow = length(threshold_params) * 3, ncol = 3))
colnames(threshold_perf) = c("currency", "threshold", "profit")
index = 1
for(i in 1:length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
threshold_perf$profit = as.numeric(threshold_perf$profit)
threshold_perf$threshold = as.numeric(threshold_perf$threshold)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
ethereum_optim = subset(threshold_perf, currency == "ethereum")
plot(ethereum_optim$threshold, ethereum_optim$profit, type = "l",
ylim = c(min(ethereum_optim$profit), max(ethereum_optim$profit)),  xlab="Time", ylab="Currency Prices")
dji_optim = subset(threshold_perf, currency == "dji")
plot(dji_optim$threshold, dji_optim$profit, type = "l",
ylim = c(min(dji_optim$profit), max(dji_optim$profit)),  xlab="Time", ylab="Currency Prices")
ethereum_optim = subset(threshold_perf, currency == "ethereum")
plot(ethereum_optim$threshold, ethereum_optim$profit, type = "l",
ylim = c(min(ethereum_optim$profit), max(ethereum_optim$profit)),  xlab="Time", ylab="Currency Prices")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), 2][1]
ethereum_thr = ethereum_optim[which(ethereum_optim$profit == max(ethereum_optim$profit)), 2][1]
dji_thr = dji_optim[which(dji_optim$profit == max(dji_optim$profit)), 2][1]
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, bitcoin_thr)
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
c(perf_dji, dji_profit) := returns_sim(dji_data, dji_thr)
head(perf_dji)
temp = as.Date(perf_dji$train_start)
head(temp)
df_perf$train_start = as.Date(df_perf$train_start)
bitcoin_data = subset(df_perf, currency == "bitcoin")
ethereum_data = subset(df_perf, currency == "ethereum")
dji_data = subset(df_perf, currency == "dji")
threshold_params = seq(0.02, 0.9, 0.02)
threshold_perf = data.frame(matrix(nrow = length(threshold_params) * 3, ncol = 3))
colnames(threshold_perf) = c("currency", "threshold", "profit")
index = 1
for(i in 1:length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
threshold_perf$profit = as.numeric(threshold_perf$profit)
threshold_perf$threshold = as.numeric(threshold_perf$threshold)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
ethereum_optim = subset(threshold_perf, currency == "ethereum")
plot(ethereum_optim$threshold, ethereum_optim$profit, type = "l",
ylim = c(min(ethereum_optim$profit), max(ethereum_optim$profit)),  xlab="Time", ylab="Currency Prices")
dji_optim = subset(threshold_perf, currency == "dji")
plot(dji_optim$threshold, dji_optim$profit, type = "l",
ylim = c(min(dji_optim$profit), max(dji_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), 2][1]
ethereum_thr = ethereum_optim[which(ethereum_optim$profit == max(ethereum_optim$profit)), 2][1]
dji_thr = dji_optim[which(dji_optim$profit == max(dji_optim$profit)), 2][1]
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, bitcoin_thr)
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
c(perf_dji, dji_profit) := returns_sim(dji_data, dji_thr)
perf_dji$day <- weekdays(perf_dji$train_start)
head(perf_dji)
dji_data$day <- weekdays(dji_data$train_start)
head(dji_data)
dji_data = subset(dji_data, day != "Sunday" & day != "Saturday")
head(dji_data)
threshold_params = seq(0.02, 0.9, 0.02)
threshold_perf = data.frame(matrix(nrow = length(threshold_params) * 3, ncol = 3))
colnames(threshold_perf) = c("currency", "threshold", "profit")
index = 1
for(i in 1:length(threshold_params)) {
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, threshold_params[i])
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, threshold_params[i])
c(perf_dji, dji_profit) := returns_sim(dji_data, threshold_params[i])
threshold_perf[index, 1:3] = c("bitcoin", threshold_params[i], bitcoin_profit)
index = index + 1
threshold_perf[index, 1:3] = c("ethereum", threshold_params[i], ethereum_profit)
index = index + 1
threshold_perf[index, 1:3] = c("dji", threshold_params[i], dji_profit)
index = index + 1
}
threshold_perf$profit = as.numeric(threshold_perf$profit)
threshold_perf$threshold = as.numeric(threshold_perf$threshold)
bitcoin_optim = subset(threshold_perf, currency == "bitcoin")
plot(bitcoin_optim$threshold, bitcoin_optim$profit, type = "l",
ylim = c(min(bitcoin_optim$profit), max(bitcoin_optim$profit)),  xlab="Time", ylab="Currency Prices")
ethereum_optim = subset(threshold_perf, currency == "ethereum")
plot(ethereum_optim$threshold, ethereum_optim$profit, type = "l",
ylim = c(min(ethereum_optim$profit), max(ethereum_optim$profit)),  xlab="Time", ylab="Currency Prices")
dji_optim = subset(threshold_perf, currency == "dji")
plot(dji_optim$threshold, dji_optim$profit, type = "l",
ylim = c(min(dji_optim$profit), max(dji_optim$profit)),  xlab="Time", ylab="Currency Prices")
bitcoin_thr = bitcoin_optim[which(bitcoin_optim$profit == max(bitcoin_optim$profit)), 2][1]
ethereum_thr = ethereum_optim[which(ethereum_optim$profit == max(ethereum_optim$profit)), 2][1]
dji_thr = dji_optim[which(dji_optim$profit == max(dji_optim$profit)), 2][1]
c(perf_bitcoin, bitcoin_profit) := returns_sim(bitcoin_data, bitcoin_thr)
c(perf_ethereum, ethereum_profit) := returns_sim(ethereum_data, ethereum_thr)
c(perf_dji, dji_profit) := returns_sim(dji_data, dji_thr)
dji_profit
bitcoin_profit
head(perf_bitcoin)
bitcoin_profit
dji_profit
ethereum_profit
head(perf_bitcoin)
library("sqldf")
# comparing all currencies and net profit between a virtual stock that follows dow-jones index and bitcoin
combined_table = sqldf("select
a.train_start as date,
a.forecast_actual as btc_forecast,
a.actual_val as btc_val,
a.volatility as btc_vol,
a.risk_adj_return as btc_rar,
a.buy_sell as btc_buy_sell,
a.profits as btc_profits,
b.forecast_actual as dji_forecast,
b.actual_val as dji_val,
b.volatility as dji_vol,
b.risk_adj_return as dji_rar,
b.buy_sell as dji_buy_sell,
b.profits as dji_profits
from perf_bitcoin as a
left join perf_dji as b on a.train_start = b.train_start")
head(combined_table)
is.na(combined_table) <- 0
combined_table[is.na(combined_table)] <- 0
combined_table$date = as.Date(combined_table$date)
head(combined_table)
# when we are allowed to buy and sell 1 unit of each each day
net_profit_combined = subset(combined_table, select = c("date", "btc_profits", "dji_profits"))
net_profit_combined$total_profit = net_profit_combined$btc_profits + net_profit_combined$dji_profits
head(net_profit_combined)
sum(net_profit_combined$total_profit)
plot(net_profit_combined$date, net_profit_combined$total_profit, xlab = "time",
ylab = "profits", type = "l")
plot(net_profit_combined$date, net_profit_combined$total_profit, xlab = "time",
ylab = "profits", type = "l", main = "Total profits when both allowed")
head(combined_table)
lines(net_profit_combined$btc_profits, type = "l", lty = 2, color = "blue")
lines(net_profit_combined$btc_profits, type = "l", lty = 2, colour = "blue")
lines(net_profit_combined$btc_profits, type = "l", lty = 2, col = "blue")
lines(net_profit_combined$btc_profits, type = "l", lty = 2, col = "blue")
plot(net_profit_combined$date, net_profit_combined$total_profit, xlab = "time",
ylab = "profits", type = "l", main = "Total profits when both allowed")
lines(net_profit_combined$btc_profits, type = "l", lty = 2, col = "blue")
lines(net_profit_combined$btc_profits, type = "l", lty = 2)
plot(net_profit_combined$date, net_profit_combined$total_profit, xlab = "time",
ylab = "profits", type = "l", main = "Total profits when both allowed")
lines(net_profit_combined$btc_profits, type = "l", lty = 2)
matplot(net_profit_combined, type = c("b"),pch=1,col = 1:4) #plot
matplot(net_profit_combined, type = c("l"), pch = 1, col = 1:4) #plot
matplot(net_profit_combined, type = c("l"), pch = 1, col = 1:3) #plot
matplot(net_profit_combined, type = c("l"), pch = 1, col = 1:2) #plot
matplot(net_profit_combined[, 2:4], type = c("l"), pch = 1, col = 1:3) #plot
matplot(net_profit_combined[, 2:3], type = c("l"), pch = 1, col = 2:3, main = "Profit comparison") #plot
legend("topleft", legend = c("bitcoin", "dji"), col=2:3, pch=1)
matplot(net_profit_combined[, 2:3], type = c("l"), pch = 1, col = 2:3, main = "Profit comparison", ylab = "Profits", xlab = "Time-Index") #plot
legend("topleft", legend = c("bitcoin", "dji"), col=2:3, pch=1)
write.csv(file = "error_analysis_all.csv", df_perf, row.names = F)
write.csv(file = "ethereum_analysis.csv", perf_ethereum, row.names = F)
write.csv(file = "dji_analysis.csv", perf_ethereum, row.names = F)
write.csv(file = "bitcoin.csv", perf_ethereum, row.names = F)
radiant::radiant()
radiant::radiant()
top_currencies
write.csv(file = "bitcoin.csv", perf_bitcoin, row.names = F)
head(perf_bitcoin)
setwd("E:/isye_6402/project/codes_isye6402/data/")
write.csv(file = "bitcoin.csv", perf_bitcoin, row.names = F)
write.csv(file = "dji_analysis.csv", perf_dji, row.names = F)
setwd("E:/isye_6402/project/codes_isye6402/data/")
librart("nnet")
library("nnet")
setwd("Downloads/")
i = 1
j = 1
k = 2
time_series = close_data
c(train, test) := train_test_split(close_data, train_start_date_windows[i],
train_end_date_windows[i], forecast_windows[j], k)
head(train)
k = 3
c(train, test) := train_test_split(close_data, train_start_date_windows[i],
train_end_date_windows[i], forecast_windows[j], k)
head(train)
time_series = train
n = length(time_series)
p = c(0:5)
q = c(0:5)
d = c(0:3)
df_aic = data.frame(matrix(nrow = length(p)*length(q)*length(d), ncol = 4, 0))
index = 1
for(i in 1:length(p)){
for(j in 1:length(q)){
for(k in 1:length(d)){
tryCatch(
{
modijk = arima(time_series, order = c(p[i],d[k],q[j]), method='ML')
aic = modijk$aic - 2*(p[i]+q[j]+1) + 2*(p[i]+q[j]+1)*n/(n-p[i]-q[j]-2)
}, error = function(e) {
aic = 999999
}
)
df_aic[index, 1] = p[i]
df_aic[index, 2] = q[j]
df_aic[index, 3] = d[k]
df_aic[index, 4] = aic
index = index + 1
}
}
}
# plot(df_aic$aic,ylab="AIC values")
row_min = df_aic[which.min(df_aic$aic),]
row_min
df_aic
which.min(df_aic$aic)
colnames(df_aic) = c("p", "q", "d", "aic")
# plot(df_aic$aic,ylab="AIC values")
row_min = df_aic[which.min(df_aic$aic),]
row_min
mod = arima(time_series, order = c(1,0,0), method='ML')
summary(mod)
mod
acf(mod$residuals)
acf(mod$residuals, main = "ACF of sample ARIMA fit for BTC")
pacf(mod$residuals, main = "PACF of sample ARIMA fit for BTC")
arch.test(mod$residuals)
library("ATSA")
library("TSA")
arch.test(mod$residuals)
arch.test(mod)
library("xgboost")
library(quantmod);
library(TTR);
library(xgboost);
library(quantmod)
setwd("E:/isye_6402/project/codes_isye6402/data/")
data = read.csv(file = "data_xgb_btc.csv", header = T)
data = read.csv(file = "btc_xgb_data.csv", header = T)
colnames(data)
colnames(data) = c("Date", "Open", "High", "Low", "Close", "Volume")
head(data)
df = read.csv(file = "btc_xgb_data.csv", header = T)
colnames(df) = c("Date", "Open", "High", "Low", "Close", "Volume")
# Define the technical indicators to build the model
rsi = RSI(df$Close, n=14, maType="WMA")
adx = data.frame(ADX(df[,c("High","Low","Close")]))
sar = SAR(df[,c("High","Low")], accel = c(0.02, 0.2))
trend = df$Close - sar
head(trend)
# create a lag in the technical indicators to avoid look-ahead bias
rsi = c(NA,head(rsi,-1))
adx$ADX = c(NA,head(adx$ADX,-1))
trend = c(NA,head(trend,-1))
# Create the target variable
price = df$Close-df$Open
class = ifelse(price > 0,1,0)
# Create a Matrix for XGB Inputs
model_df = data.frame(class,rsi,adx$ADX,trend)
model = matrix(c(class,rsi,adx$ADX,trend), nrow=length(class))
model = na.omit(model)
colnames(model) = c("class","rsi","adx","trend")
head(model)
nrow(model)
sum(model)
sum(model$class)
class(model)
sum(model[, 1])
# Split data into train and test sets
train_size = 4/5
breakpoint = nrow(model) * train_size
training_data = model[1:breakpoint,]
test_data = model[(breakpoint+1):nrow(model),]
# Split data training and test data into X and Y
X_train = training_data[,2:4] ; Y_train = training_data[,1]
class(X_train)[1]
class(Y_train)
X_test = test_data[,2:4]
Y_test = test_data[,1]
class(X_test)[1]
class(Y_test)
# Train the xgboost model using the "xgboost" function
dtrain = xgb.DMatrix(data = X_train, label = Y_train)
xgModel = xgboost(data = dtrain, nround = 5, objective = "binary:logistic")
# Using cross validation
dtrain = xgb.DMatrix(data = X_train, label = Y_train)
cv = xgb.cv(data = dtrain, nround = 10, nfold = 5, objective = "binary:logistic")
print(cv)
preds = predict(xgModel, X_test)
head(preds)
sum(preds > 0.7)
sum(preds < 0.3)
length(preds)
# Split data into train and test sets
train_size = nrow(model) - 235
# Split data into train and test sets
breakpoint = nrow(model) - 235
training_data = model[1:breakpoint,]
test_data = model[(breakpoint+1):nrow(model),]
dim(test_data)
head(df)
# Split data training and test data into X and Y
X_train = training_data[,2:4] ; Y_train = training_data[,1]
class(X_train)[1]
class(Y_train)
X_test = test_data[,2:4]
Y_test = test_data[,1]
class(X_test)[1]
class(Y_test)
# Train the xgboost model using the "xgboost" function
dtrain = xgb.DMatrix(data = X_train, label = Y_train)
xgModel = xgboost(data = dtrain, nround = 5, objective = "binary:logistic")
# Using cross validation
dtrain = xgb.DMatrix(data = X_train, label = Y_train)
cv = xgb.cv(data = dtrain, nround = 10, nfold = 5, objective = "binary:logistic")
print(cv)
test_df = data.frame(test_data)
head(test_df)
test_df = cbind(test_df, data.frame(preds))
# Using cross validation
dtrain = xgb.DMatrix(data = X_train, label = Y_train)
cv = xgb.cv(data = dtrain, nround = 10, nfold = 5, objective = "binary:logistic")
preds = predict(cv, X_test)
dim(X_test)
preds = predict(xgModel, X_test)
length(preds)
dim(test_df)
test_df = cbind(test_df, data.frame(preds))
head(test_df)
nrow(df[(nrow(df) - 235): nrow(df), ])
nrow(df[(nrow(df) - 236): nrow(df), ])
nrow(df[(nrow(df) - 234): nrow(df), ])
test_df_fin = cbind(test_df, df[(nrow(df) - 234): nrow(df), ])
head(test_df_fin)
write.csv(file = "xgb_output.csv", test_df_fin, row.names = F)
